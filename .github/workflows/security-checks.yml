# ----------------------------------------------------------------------
# © 2025 KR-Labs. All rights reserved.
# KR-Labs™ is a trademark of Quipu Research Labs, LLC,
# a subsidiary of Sudiata Giddasira, Inc.
# ----------------------------------------------------------------------
# SPDX-License-Identifier: Apache-2.0

name: Security & IP Protection

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  copyright-check:
    name: Verify Copyright Headers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Check copyright headers
        run: |
          python scripts/security/verify_copyright_headers.py --path .
  
  trademark-check:
    name: Verify Trademark Notices
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Check trademark notices
        run: |
          python scripts/security/check_trademarks.py --path .
  
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for gitleaks
      
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
  
  license-compliance:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Ruby (for Licensee)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
      
      - name: Install Licensee
        run: gem install licensee
      
      - name: Run Licensee check
        run: |
          licensee detect --json . > licensee-report.json
          cat licensee-report.json
          
          # Check if license is detected
          if licensee detect . | grep -q "License: None"; then
            echo "❌ No license detected!"
            exit 1
          fi
          
          # Check for GPL licenses (not allowed in our stack)
          if licensee detect . | grep -qi "gpl"; then
            echo "❌ GPL license detected - not compatible with our licensing strategy!"
            exit 1
          fi
          
          echo "✅ License compliance check passed"
      
      - name: Upload Licensee report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: licensee-report
          path: licensee-report.json
      
      - name: Run FOSSA scan (if configured)
        if: ${{ vars.ENABLE_FOSSA == 'true' }}
        uses: fossas/fossa-action@v1
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        continue-on-error: true
  
  dependency-review:
    name: Dependency Security Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
  
  vulnerability-scan:
    name: Vulnerability Scanning (Trivy)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
  
  python-security:
    name: Python Security Checks (Bandit + Safety)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          pip install bandit[toml] safety
      
      - name: Run Bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f screen
        continue-on-error: true
      
      - name: Run Safety check
        run: |
          safety check --json > safety-report.json || true
          safety check
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-security-reports
          path: |
            bandit-report.json
            safety-report.json
  
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
  
  security-summary:
    name: Security Summary & Badge
    runs-on: ubuntu-latest
    needs: [copyright-check, trademark-check, secret-scanning, python-security]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate security summary
        run: |
          echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Copyright Headers | ${{ needs.copyright-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trademark Notices | ${{ needs.trademark-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scanning.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Security | ${{ needs.python-security.result == 'success' && '✅ Passed' || '⚠️ Review Required' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ KRL Defense Stack Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Layer 1: Legal Protection (Copyright, Trademark, License)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Layer 2: Technical Protection (Secret Scanning, Gitleaks)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Layer 5: Build Verification (CI/CD Security)" >> $GITHUB_STEP_SUMMARY
